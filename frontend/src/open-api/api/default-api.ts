/* tslint:disable */
/* eslint-disable */
/**
 * NestJS/NextJS Template
 * API for NestJS/NextJS Template
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from '../common';
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from '../base';
// @ts-ignore
import { AccessTokenDTO } from '../models';
// @ts-ignore
import { LoginResponseDTO } from '../models';
// @ts-ignore
import { LoginUserDTO } from '../models';
// @ts-ignore
import { RefreshTokenDTO } from '../models';
// @ts-ignore
import { RegisterUserDTO } from '../models';
// @ts-ignore
import { UserDTO } from '../models';
/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCsrfToken: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/csrf`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn: async (
      loginUserDTO: LoginUserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'loginUserDTO' is not null or undefined
      assertParamExists('logIn', 'loginUserDTO', loginUserDTO);
      const localVarPath = `/api/v1/auth/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        loginUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {UserDTO} userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut: async (
      userDTO: UserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userDTO' is not null or undefined
      assertParamExists('logOut', 'userDTO', userDTO);
      const localVarPath = `/api/v1/auth/logout`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        userDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RefreshTokenDTO} refreshTokenDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh: async (
      refreshTokenDTO: RefreshTokenDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'refreshTokenDTO' is not null or undefined
      assertParamExists('refresh', 'refreshTokenDTO', refreshTokenDTO);
      const localVarPath = `/api/v1/auth/refresh`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        refreshTokenDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register: async (
      registerUserDTO: RegisterUserDTO,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'registerUserDTO' is not null or undefined
      assertParamExists('register', 'registerUserDTO', registerUserDTO);
      const localVarPath = `/api/v1/auth/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        registerUserDTO,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCsrfToken(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getCsrfToken(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHello(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getHello(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logIn(
      loginUserDTO: LoginUserDTO,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginResponseDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logIn(
        loginUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {UserDTO} userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logOut(
      userDTO: UserDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.logOut(
        userDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {RefreshTokenDTO} refreshTokenDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async refresh(
      refreshTokenDTO: RefreshTokenDTO,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.refresh(
        refreshTokenDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async register(
      registerUserDTO: RegisterUserDTO,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<LoginResponseDTO>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.register(
        registerUserDTO,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCsrfToken(options?: any): AxiosPromise<void> {
      return localVarFp
        .getCsrfToken(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: any): AxiosPromise<string> {
      return localVarFp
        .getHello(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {LoginUserDTO} loginUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logIn(
      loginUserDTO: LoginUserDTO,
      options?: any
    ): AxiosPromise<LoginResponseDTO> {
      return localVarFp
        .logIn(loginUserDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UserDTO} userDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logOut(userDTO: UserDTO, options?: any): AxiosPromise<void> {
      return localVarFp
        .logOut(userDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RefreshTokenDTO} refreshTokenDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refresh(
      refreshTokenDTO: RefreshTokenDTO,
      options?: any
    ): AxiosPromise<AccessTokenDTO> {
      return localVarFp
        .refresh(refreshTokenDTO, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {RegisterUserDTO} registerUserDTO
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    register(
      registerUserDTO: RegisterUserDTO,
      options?: any
    ): AxiosPromise<LoginResponseDTO> {
      return localVarFp
        .register(registerUserDTO, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getCsrfToken(options?: any) {
    return DefaultApiFp(this.configuration)
      .getCsrfToken(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getHello(options?: any) {
    return DefaultApiFp(this.configuration)
      .getHello(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {LoginUserDTO} loginUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logIn(loginUserDTO: LoginUserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .logIn(loginUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UserDTO} userDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public logOut(userDTO: UserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .logOut(userDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RefreshTokenDTO} refreshTokenDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public refresh(refreshTokenDTO: RefreshTokenDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .refresh(refreshTokenDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {RegisterUserDTO} registerUserDTO
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public register(registerUserDTO: RegisterUserDTO, options?: any) {
    return DefaultApiFp(this.configuration)
      .register(registerUserDTO, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
